name: WASM Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'

    - name: Build WASM for web
      run: wasm-pack build --target web --out-dir pkg --release
      working-directory: rustreexo-wasm

    - name: Create GitHub Pages site
      run: |
        mkdir -p site
        
        # Copy WASM package
        cp -r rustreexo-wasm/pkg site/
        
        # Create main index.html
        cat > site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Rustreexo WASM - Live Demo</title>
            <style>
                body {
                    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
                    color: #e0e0e0;
                    line-height: 1.6;
                    min-height: 100vh;
                }
                
                .header {
                    text-align: center;
                    margin-bottom: 40px;
                    padding: 40px 20px;
                    background: rgba(45, 45, 45, 0.8);
                    border-radius: 12px;
                    border: 1px solid #444;
                }
                
                .header h1 {
                    color: #f39c12;
                    font-size: 2.5em;
                    margin: 0 0 10px 0;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
                }
                
                .header p {
                    color: #3498db;
                    font-size: 1.2em;
                    margin: 0;
                }
                
                .demo-links {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-bottom: 40px;
                }
                
                .demo-card {
                    background: rgba(45, 45, 45, 0.9);
                    border-radius: 8px;
                    padding: 30px;
                    border: 1px solid #444;
                    transition: all 0.3s ease;
                    text-decoration: none;
                    color: inherit;
                }
                
                .demo-card:hover {
                    transform: translateY(-5px);
                    border-color: #f39c12;
                    box-shadow: 0 10px 25px rgba(243, 156, 18, 0.2);
                }
                
                .demo-card h3 {
                    color: #27ae60;
                    margin: 0 0 15px 0;
                    font-size: 1.4em;
                }
                
                .demo-card p {
                    color: #bdc3c7;
                    margin: 0 0 15px 0;
                }
                
                .demo-card .features {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
                
                .demo-card .features li {
                    color: #3498db;
                    margin: 5px 0;
                    padding-left: 20px;
                    position: relative;
                }
                
                .demo-card .features li::before {
                    content: "‚Üí";
                    position: absolute;
                    left: 0;
                    color: #f39c12;
                }
                
                .info-section {
                    background: rgba(45, 45, 45, 0.8);
                    border-radius: 8px;
                    padding: 30px;
                    border: 1px solid #444;
                    margin-bottom: 20px;
                }
                
                .info-section h2 {
                    color: #3498db;
                    margin: 0 0 20px 0;
                    border-bottom: 2px solid #3498db;
                    padding-bottom: 10px;
                }
                
                .github-link {
                    display: inline-block;
                    background: #27ae60;
                    color: white;
                    text-decoration: none;
                    padding: 12px 24px;
                    border-radius: 6px;
                    font-weight: bold;
                    transition: background 0.3s ease;
                }
                
                .github-link:hover {
                    background: #229954;
                }
                
                code {
                    background: rgba(0,0,0,0.3);
                    padding: 2px 6px;
                    border-radius: 3px;
                    color: #f39c12;
                }
                
                @media (max-width: 768px) {
                    .header h1 {
                        font-size: 2em;
                    }
                    .demo-links {
                        grid-template-columns: 1fr;
                    }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü¶Ä Rustreexo WASM</h1>
                <p>High-performance WebAssembly bindings for Utreexo accumulators</p>
            </div>

            <div class="demo-links">
                <a href="./browser-demo.html" class="demo-card">
                    <h3>üåê Interactive Browser Demo</h3>
                    <p>Full-featured browser demo with real-time performance metrics and interactive controls.</p>
                    <ul class="features">
                        <li>Create and manage accumulators</li>
                        <li>Generate and verify proofs</li>
                        <li>Performance benchmarking</li>
                        <li>Real-time statistics</li>
                    </ul>
                </a>
                
                <a href="./performance-demo.html" class="demo-card">
                    <h3>‚ö° Performance Showcase</h3>
                    <p>Automated performance demonstration showcasing WASM speed and efficiency.</p>
                    <ul class="features">
                        <li>Automated benchmarks</li>
                        <li>Memory usage tracking</li>
                        <li>Batch operations</li>
                        <li>Speed comparisons</li>
                    </ul>
                </a>
            </div>

            <div class="info-section">
                <h2>üöÄ About Rustreexo WASM</h2>
                <p>
                    Rustreexo WASM provides high-performance WebAssembly bindings for Utreexo, 
                    a cryptographic accumulator designed for Bitcoin's UTXO set compression. 
                    This allows web applications to efficiently manage and verify large sets 
                    of cryptographic commitments directly in the browser.
                </p>
                
                <h3>Key Features:</h3>
                <ul class="features">
                    <li><strong>Fast Performance</strong> - Native Rust speed in the browser</li>
                    <li><strong>Memory Efficient</strong> - Optimized for large datasets</li>
                    <li><strong>Type Safe</strong> - Full TypeScript definitions included</li>
                    <li><strong>Cross Platform</strong> - Works in browsers, Node.js, and bundlers</li>
                    <li><strong>Production Ready</strong> - Comprehensive test coverage</li>
                </ul>
                
                <h3>Installation:</h3>
                <p>
                    <code>npm install @rustreexo/rustreexo-wasm-web</code> for web browsers<br>
                    <code>npm install @rustreexo/rustreexo-wasm-nodejs</code> for Node.js<br>
                    <code>npm install @rustreexo/rustreexo-wasm-bundler</code> for bundlers
                </p>
                
                <p style="margin-top: 30px;">
                    <a href="https://github.com/${{ github.repository }}" class="github-link">
                        üìö View on GitHub
                    </a>
                </p>
            </div>
        </body>
        </html>
        EOF
        
        # Copy and modify the browser example as the main demo
        cp rustreexo-wasm/examples/browser_example.html site/browser-demo.html
        
        # Fix import paths in browser demo for GitHub Pages
        # GitHub Pages serves from /rustreexo-ffi/ so we need relative paths
        sed -i 's|../pkg/rustreexo_wasm.js|./pkg/rustreexo_wasm.js|g' site/browser-demo.html
        
        # Verify the replacements worked
        echo "‚úÖ Fixed import paths in browser-demo.html:"
        grep -n "pkg/rustreexo_wasm.js" site/browser-demo.html || echo "No remaining ../pkg/ imports found"
        
        # Create a performance-focused demo
        cat > site/performance-demo.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Rustreexo WASM - Performance Demo</title>
            <style>
                body {
                    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                    max-width: 1000px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #1a1a1a;
                    color: #e0e0e0;
                    line-height: 1.6;
                }
                
                .container {
                    background-color: #2d2d2d;
                    border-radius: 8px;
                    padding: 20px;
                    margin-bottom: 20px;
                    border: 1px solid #444;
                }
                
                h1 {
                    color: #f39c12;
                    text-align: center;
                    margin-bottom: 30px;
                }
                
                h2 {
                    color: #3498db;
                    border-bottom: 2px solid #3498db;
                    padding-bottom: 5px;
                }
                
                .metrics {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin: 20px 0;
                }
                
                .metric {
                    background-color: #34495e;
                    padding: 15px;
                    border-radius: 5px;
                    text-align: center;
                }
                
                .metric-value {
                    font-size: 24px;
                    font-weight: bold;
                    color: #f39c12;
                }
                
                .metric-label {
                    font-size: 14px;
                    color: #bdc3c7;
                    margin-top: 5px;
                }
                
                .progress {
                    width: 100%;
                    height: 20px;
                    background-color: #444;
                    border-radius: 10px;
                    overflow: hidden;
                    margin: 10px 0;
                }
                
                .progress-bar {
                    height: 100%;
                    background: linear-gradient(90deg, #27ae60, #2ecc71);
                    width: 0%;
                    transition: width 0.3s ease;
                }
                
                .log {
                    background-color: #1a1a1a;
                    border: 1px solid #555;
                    border-radius: 5px;
                    padding: 15px;
                    max-height: 300px;
                    overflow-y: auto;
                    font-size: 14px;
                    white-space: pre-wrap;
                }
                
                .success { color: #27ae60; }
                .info { color: #3498db; }
                .warning { color: #f39c12; }
                
                button {
                    background-color: #27ae60;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    margin: 5px;
                    font-family: inherit;
                }
                
                button:hover {
                    background-color: #229954;
                }
                
                button:disabled {
                    background-color: #555;
                    cursor: not-allowed;
                }
            </style>
        </head>
        <body>
            <h1>‚ö° Rustreexo WASM Performance Demo</h1>
            
            <div class="container">
                <h2>Performance Metrics</h2>
                <div class="metrics">
                    <div class="metric">
                        <div class="metric-value" id="operations-per-second">0</div>
                        <div class="metric-label">Operations/sec</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value" id="total-operations">0</div>
                        <div class="metric-label">Total Operations</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value" id="avg-latency">0ms</div>
                        <div class="metric-label">Avg Latency</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value" id="memory-usage">0KB</div>
                        <div class="metric-label">Memory Usage</div>
                    </div>
                </div>
                
                <div class="progress">
                    <div class="progress-bar" id="progress"></div>
                </div>
                
                <div style="text-align: center; margin: 20px 0;">
                    <button onclick="runBenchmark()" id="start-btn">Start Performance Test</button>
                    <button onclick="stopBenchmark()" id="stop-btn" disabled>Stop Test</button>
                    <button onclick="clearLog()" id="clear-btn">Clear Log</button>
                </div>
            </div>
            
            <div class="container">
                <h2>Performance Log</h2>
                <div class="log" id="log"></div>
            </div>

            <script type="module">
                import init, { WasmStump, WasmPollard } from './pkg/rustreexo_wasm.js';
                
                let isRunning = false;
                let startTime = 0;
                let operationCount = 0;
                let latencies = [];
                
                function log(message, type = 'info') {
                    const logElement = document.getElementById('log');
                    const timestamp = new Date().toLocaleTimeString();
                    const className = type;
                    logElement.innerHTML += `<span class="${className}">[${timestamp}] ${message}</span>\n`;
                    logElement.scrollTop = logElement.scrollHeight;
                }
                
                function updateMetrics() {
                    const elapsed = (Date.now() - startTime) / 1000;
                    const opsPerSecond = elapsed > 0 ? (operationCount / elapsed).toFixed(1) : 0;
                    const avgLatency = latencies.length > 0 ? 
                        (latencies.reduce((a, b) => a + b, 0) / latencies.length).toFixed(2) : 0;
                    
                    document.getElementById('operations-per-second').textContent = opsPerSecond;
                    document.getElementById('total-operations').textContent = operationCount;
                    document.getElementById('avg-latency').textContent = avgLatency + 'ms';
                    
                    // Estimate memory usage (rough approximation)
                    const memoryEstimate = Math.round(operationCount * 0.5); // ~0.5KB per operation
                    document.getElementById('memory-usage').textContent = memoryEstimate + 'KB';
                }
                
                function generateTestHash(index) {
                    const hash = new Array(64).fill('0');
                    const hexIndex = index.toString(16).padStart(8, '0');
                    return hash.slice(0, -8).join('') + hexIndex;
                }
                
                window.runBenchmark = async function() {
                    if (isRunning) return;
                    
                    try {
                        log('üöÄ Initializing Rustreexo WASM...', 'info');
                        await init();
                        
                        isRunning = true;
                        startTime = Date.now();
                        operationCount = 0;
                        latencies = [];
                        
                        document.getElementById('start-btn').disabled = true;
                        document.getElementById('stop-btn').disabled = false;
                        
                        log('‚úÖ WASM initialized, starting performance test...', 'success');
                        
                        const stump = new WasmStump();
                        const pollard = new WasmPollard();
                        const elements = [];
                        const emptyProof = JSON.stringify({ targets: [], hashes: [] });
                        
                        let batchCount = 0;
                        const maxBatches = 20;
                        
                        const runBatch = () => {
                            if (!isRunning || batchCount >= maxBatches) {
                                log('üèÅ Performance test completed!', 'success');
                                log(`üìä Final Results: ${operationCount} operations in ${((Date.now() - startTime) / 1000).toFixed(1)}s`, 'info');
                                
                                document.getElementById('progress').style.width = '100%';
                                document.getElementById('start-btn').disabled = false;
                                document.getElementById('stop-btn').disabled = true;
                                isRunning = false;
                                
                                stump.free();
                                pollard.free();
                                return;
                            }
                            
                            const batchSize = 10;
                            const batchElements = [];
                            
                            for (let i = 0; i < batchSize; i++) {
                                batchElements.push(generateTestHash(batchCount * batchSize + i));
                            }
                            
                            // Add elements
                            const addStart = performance.now();
                            stump.modify(emptyProof, batchElements, []);
                            const additions = batchElements.map(hash => ({ hash, remember: true }));
                            pollard.modify(emptyProof, JSON.stringify(additions), []);
                            const addEnd = performance.now();
                            
                            elements.push(...batchElements);
                            operationCount += batchSize;
                            latencies.push(addEnd - addStart);
                            
                            // Generate and verify proofs
                            if (elements.length > 0) {
                                const proofStart = performance.now();
                                const targetElement = elements[Math.floor(Math.random() * elements.length)];
                                const proof = pollard.prove_single(targetElement);
                                const isValid = stump.verify(proof, [targetElement]);
                                const proofEnd = performance.now();
                                
                                operationCount += 2; // proof generation + verification
                                latencies.push(proofEnd - proofStart);
                                
                                if (!isValid) {
                                    log('‚ùå Proof verification failed!', 'warning');
                                }
                            }
                            
                            batchCount++;
                            const progress = (batchCount / maxBatches) * 100;
                            document.getElementById('progress').style.width = progress + '%';
                            
                            updateMetrics();
                            
                            if (batchCount % 5 === 0) {
                                log(`üìà Batch ${batchCount}/${maxBatches} completed - ${elements.length} total elements`, 'info');
                            }
                            
                            // Continue with next batch
                            setTimeout(runBatch, 10);
                        };
                        
                        runBatch();
                        
                    } catch (error) {
                        log(`‚ùå Error: ${error.message}`, 'warning');
                        isRunning = false;
                        document.getElementById('start-btn').disabled = false;
                        document.getElementById('stop-btn').disabled = true;
                    }
                };
                
                window.stopBenchmark = function() {
                    isRunning = false;
                    log('‚èπÔ∏è Performance test stopped by user', 'warning');
                };
                
                window.clearLog = function() {
                    document.getElementById('log').innerHTML = '';
                };
                
                // Auto-start the demo after a brief delay
                setTimeout(() => {
                    log('üëã Welcome to Rustreexo WASM Performance Demo!', 'success');
                    log('Click "Start Performance Test" to begin automated benchmarking.', 'info');
                }, 500);
            </script>
        </body>
        </html>
        EOF
        
        # Create a simple 404 page
        cat > site/404.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>404 - Page Not Found | Rustreexo WASM</title>
            <style>
                body {
                    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
                    color: #e0e0e0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    margin: 0;
                    text-align: center;
                }
                .container {
                    background: rgba(45, 45, 45, 0.9);
                    padding: 60px 40px;
                    border-radius: 12px;
                    border: 1px solid #444;
                    max-width: 500px;
                }
                h1 {
                    color: #f39c12;
                    font-size: 4em;
                    margin: 0 0 20px 0;
                }
                h2 {
                    color: #3498db;
                    margin: 0 0 20px 0;
                }
                p {
                    color: #bdc3c7;
                    margin: 0 0 30px 0;
                }
                a {
                    display: inline-block;
                    background: #27ae60;
                    color: white;
                    text-decoration: none;
                    padding: 12px 24px;
                    border-radius: 6px;
                    font-weight: bold;
                    transition: background 0.3s ease;
                }
                a:hover {
                    background: #229954;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>404</h1>
                <h2>Page Not Found</h2>
                <p>The page you're looking for doesn't exist or has been moved.</p>
                <a href="./">üè† Back to Home</a>
            </div>
        </body>
        </html>
        EOF
        
        echo "‚úÖ GitHub Pages site created successfully!"
        echo "üìÅ Site structure:"
        find site -type f | sort

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './site'

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Update deployment status
      run: |
        echo "üöÄ Successfully deployed to GitHub Pages!"
        echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "üìä Demo URLs:"
        echo "   - Main: ${{ steps.deployment.outputs.page_url }}"
        echo "   - Browser Demo: ${{ steps.deployment.outputs.page_url }}browser-demo.html"
        echo "   - Performance Demo: ${{ steps.deployment.outputs.page_url }}performance-demo.html"