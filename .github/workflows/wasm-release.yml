name: WASM Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version info
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.version }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        
        VERSION=${TAG#v}
        IS_PRERELEASE="false"
        
        # Check if this is a prerelease (contains alpha, beta, rc, etc.)
        if echo "$VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
          IS_PRERELEASE="true"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "Version: $VERSION"
        echo "Tag: $TAG" 
        echo "Is prerelease: $IS_PRERELEASE"

  build-release:
    name: Build Release Packages
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0

    - name: Update Cargo.toml version
      run: |
        # Only update the package version, not dependency versions
        sed -i '/^\[package\]/,/^\[/ s/^version = .*/version = "${{ needs.prepare-release.outputs.version }}"/' Cargo.toml
        echo "Updated Cargo.toml package version to ${{ needs.prepare-release.outputs.version }}"
        
        # Verify the change
        echo "Package section after update:"
        sed -n '/^\[package\]/,/^\[/p' Cargo.toml
      working-directory: rustreexo-wasm

    - name: Build all WASM targets
      run: |
        # Build for web
        wasm-pack build --target web --out-dir pkg-web --release
        
        # Build for Node.js  
        wasm-pack build --target nodejs --out-dir pkg-node --release
        
        # Build for bundlers
        wasm-pack build --target bundler --out-dir pkg-bundler --release
      working-directory: rustreexo-wasm

    - name: Create release archives
      run: |
        mkdir -p release-packages
        
        # Create tar.gz archives for each target (note: nodejs target creates pkg-node directory)
        tar -czf "release-packages/rustreexo-wasm-web-${{ needs.prepare-release.outputs.version }}.tar.gz" \
          -C "rustreexo-wasm/pkg-web" .
        tar -czf "release-packages/rustreexo-wasm-nodejs-${{ needs.prepare-release.outputs.version }}.tar.gz" \
          -C "rustreexo-wasm/pkg-node" .
        tar -czf "release-packages/rustreexo-wasm-bundler-${{ needs.prepare-release.outputs.version }}.tar.gz" \
          -C "rustreexo-wasm/pkg-bundler" .
        
        # Create a combined archive
        tar -czf "release-packages/rustreexo-wasm-all-targets-${{ needs.prepare-release.outputs.version }}.tar.gz" \
          rustreexo-wasm/pkg-web/ rustreexo-wasm/pkg-node/ rustreexo-wasm/pkg-bundler/

    - name: Generate checksums
      run: |
        cd release-packages
        sha256sum *.tar.gz > SHA256SUMS
        cat SHA256SUMS

    - name: Upload release packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ needs.prepare-release.outputs.version }}
        path: release-packages/
        retention-days: 90

    - name: Upload individual packages for publishing
      uses: actions/upload-artifact@v4
      with:
        name: npm-packages-${{ needs.prepare-release.outputs.version }}
        path: |
          rustreexo-wasm/pkg-web/
          rustreexo-wasm/pkg-node/
          rustreexo-wasm/pkg-bundler/
        retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    environment: npm-publishing
    
    strategy:
      matrix:
        target: [web, nodejs, bundler]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Download NPM packages
      uses: actions/download-artifact@v4
      with:
        name: npm-packages-${{ needs.prepare-release.outputs.version }}
        path: ./

    - name: Update package.json metadata
      run: |
        # Determine the correct directory name
        if [ "${{ matrix.target }}" = "nodejs" ]; then
          PKG_DIR="pkg-node"
        else
          PKG_DIR="pkg-${{ matrix.target }}"
        fi
        
        cd ${PKG_DIR}
        
        # Set the correct scoped package name
        case "${{ matrix.target }}" in
          "web")
            PACKAGE_NAME="@rustreexo/rustreexo-wasm-web"
            ;;
          "nodejs")
            PACKAGE_NAME="@rustreexo/rustreexo-wasm-nodejs"
            ;;
          "bundler")
            PACKAGE_NAME="@rustreexo/rustreexo-wasm-bundler"
            ;;
        esac
        
        # Update package.json with version, scoped name and metadata
        jq --arg name "$PACKAGE_NAME" --arg version "${{ needs.prepare-release.outputs.version }}" '. + {
          "name": $name,
          "version": $version,
          "repository": {
            "type": "git",
            "url": "git+https://github.com/${{ github.repository }}.git"
          },
          "bugs": {
            "url": "https://github.com/${{ github.repository }}/issues"
          },
          "homepage": "https://github.com/${{ github.repository }}#readme",
          "keywords": ["utreexo", "accumulator", "bitcoin", "wasm", "cryptography", "rust"],
          "author": "AbdelStark",
          "license": "MIT"
        }' package.json > temp.json
        
        mv temp.json package.json
        
        echo "Updated package.json for ${{ matrix.target }} target:"
        cat package.json

    - name: Publish to NPM (dry run)
      run: |
        # Determine the correct directory name
        if [ "${{ matrix.target }}" = "nodejs" ]; then
          PKG_DIR="pkg-node"
        else
          PKG_DIR="pkg-${{ matrix.target }}"
        fi
        
        cd ${PKG_DIR}
        npm publish --dry-run
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish to NPM
      run: |
        # Determine the correct directory name
        if [ "${{ matrix.target }}" = "nodejs" ]; then
          PKG_DIR="pkg-node"
        else
          PKG_DIR="pkg-${{ matrix.target }}"
        fi
        
        cd ${PKG_DIR}
        
        # Determine NPM tag
        NPM_TAG="latest"
        if [ "${{ needs.prepare-release.outputs.is-prerelease }}" = "true" ]; then
          NPM_TAG="next"
        fi
        
        echo "Publishing with tag: $NPM_TAG"
        npm publish --tag $NPM_TAG --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, publish-npm]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.prepare-release.outputs.version }}
        path: release-packages/

    - name: Generate release notes
      id: release-notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > release-notes.md
          echo "" >> release-notes.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD >> release-notes.md
        else
          echo "## Initial Release" > release-notes.md
          echo "" >> release-notes.md
          echo "First release of Rustreexo WASM bindings." >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Package Information" >> release-notes.md
        echo "" >> release-notes.md
        echo "**Version:** ${{ needs.prepare-release.outputs.version }}" >> release-notes.md
        echo "**Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
        echo "**Commit:** ${{ github.sha }}" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Available Packages" >> release-notes.md
        echo "" >> release-notes.md
        echo "- \`@rustreexo/rustreexo-wasm-web\` - For web browsers" >> release-notes.md
        echo "- \`@rustreexo/rustreexo-wasm-nodejs\` - For Node.js" >> release-notes.md  
        echo "- \`@rustreexo/rustreexo-wasm-bundler\` - For bundlers (webpack, rollup, etc.)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo '```bash' >> release-notes.md
        echo '# For web browsers' >> release-notes.md
        echo 'npm install @rustreexo/rustreexo-wasm-web' >> release-notes.md
        echo '' >> release-notes.md
        echo '# For Node.js' >> release-notes.md
        echo 'npm install @rustreexo/rustreexo-wasm-nodejs' >> release-notes.md
        echo '' >> release-notes.md
        echo '# For bundlers' >> release-notes.md  
        echo 'npm install @rustreexo/rustreexo-wasm-bundler' >> release-notes.md
        echo '```' >> release-notes.md
        echo "" >> release-notes.md
        echo "## File Checksums" >> release-notes.md
        echo "" >> release-notes.md
        echo '```' >> release-notes.md
        cat release-packages/SHA256SUMS >> release-notes.md
        echo '```' >> release-notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: Release ${{ needs.prepare-release.outputs.tag }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        files: |
          release-packages/*.tar.gz
          release-packages/SHA256SUMS
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: always() && (needs.create-github-release.result == 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create post-release issue
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          try {
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.prepare-release.outputs.tag }}'
            });
            
            const issueBody = `
            🎉 Release ${{ needs.prepare-release.outputs.tag }} has been published!
            
            **Release URL:** ${release.html_url}
            **NPM Packages:** 
            - [@rustreexo/rustreexo-wasm-web](https://www.npmjs.com/package/@rustreexo/rustreexo-wasm-web)
            - [@rustreexo/rustreexo-wasm-nodejs](https://www.npmjs.com/package/@rustreexo/rustreexo-wasm-nodejs)  
            - [@rustreexo/rustreexo-wasm-bundler](https://www.npmjs.com/package/@rustreexo/rustreexo-wasm-bundler)
            
            ## Post-Release Checklist
            
            - [ ] Verify NPM packages are accessible
            - [ ] Update documentation with new version
            - [ ] Announce release on social media/forums
            - [ ] Update dependent projects
            - [ ] Monitor for any issues
            
            /cc @${{ github.actor }}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-Release Tasks for ${{ needs.prepare-release.outputs.tag }}`,
              body: issueBody,
              labels: ['release', 'task']
            });
            
            console.log('✅ Post-release issue created successfully');
          } catch (error) {
            console.log('⚠️ Failed to create post-release issue:', error.message);
            console.log('This is not critical for the release process.');
          }